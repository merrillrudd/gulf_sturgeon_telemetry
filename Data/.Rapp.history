years=year.vec[1]
Ncur=0.2*K
Ncur
Nt=vector(length=years)
Nt
Nt[1]=Ncur
Nt[1]
Nt
for(i in 2:years)#
	{#
		Nt[i]=Nt[i-1]+r*Nt[i-1]*(1-(Nt[i-1]/K)^2.39)-u*Nt[i-1]#
	}
Nt
results[which(u.vec==c),which(r.vec==a),which(K.vec==b)]=Nt[length(Nt)]/K
results
K
c
a
b
u
r
K
results[which(u.vec==u),which(r.vec==r),which(K.vec==K)]=Nt[length(Nt)]/K
results
rm(list=ls())#
#
r.vec=c(0.1,0.2,0.3)#
K.vec=c(1000,2000,3000)#
u.vec=c(0,0.05,0.1,0.15)#
year.vec=c(21,101)#
#
results=array(0,dim=c(length(u.vec),length(r.vec),length(K.vec)))#
#
fun=function(r,K,u,years)#
{#
	Ncur=0.2*K#
	Nt=vector(length=years)#
	Nt[1]=Ncur	#
#
	for(i in 2:years)#
	{#
		Nt[i]=Nt[i-1]+r*Nt[i-1]*(1-(Nt[i-1]/K)^2.39)-u*Nt[i-1]#
	}#
	results[which(u.vec==u),which(r.vec==r),which(K.vec==K)]=Nt[length(Nt)]/K#
#
return(results)#
}
for(a in r.vec)#
{#
	for(b in K.vec)#
	{#
		for(c in u.vec)#
		{#
			fun(r=a,K=b,u=c,years=year.vec[1])#
		}#
	}#
}
results
a
b
c
r.vec
rm(list=ls())#
#
r.vec=c(0.1,0.2,0.3)#
K.vec=c(1000,2000,3000)#
u.vec=c(0,0.05,0.1,0.15)#
year.vec=c(21,101)#
#
results=array(0,dim=c(length(u.vec),length(r.vec),length(K.vec)))#
#
fun=function(r,K,u,years)#
{#
	Ncur=0.2*K#
	Nt=vector(length=years)#
	Nt[1]=Ncur	#
#
	for(i in 2:years)#
	{#
		Nt[i]=Nt[i-1]+r*Nt[i-1]*(1-(Nt[i-1]/K)^2.39)-u*Nt[i-1]#
	}#
	results[which(u.vec==u),which(r.vec==r),which(K.vec==K)]=Nt[length(Nt)]/K#
#
return(results)#
}#
#
for(a in 1:length(r.vec))#
{#
	for(b in 1:length(K.vec))#
	{#
		for(c in 1:length(u.vec))#
		{#
			fun(r=r.vec[a],K=K.vec[b],u=u.vec[c],years=year.vec[1])#
		}#
	}#
}
results
rm(list=ls())#
#
r.vec=c(0.1,0.2,0.3)#
K.vec=c(1000,2000,3000)#
u.vec=c(0,0.05,0.1,0.15)#
year.vec=c(21,101)#
#
results=array(0,dim=c(length(u.vec),length(r.vec),length(K.vec)))#
#
fun=function(r,K,u,years)#
{#
	Ncur=0.2*K#
	Nt=vector(length=years)#
	Nt[1]=Ncur	#
#
	for(i in 2:years)#
	{#
		Nt[i]=Nt[i-1]+r*Nt[i-1]*(1-(Nt[i-1]/K)^2.39)-u*Nt[i-1]#
	}#
	results[c,a,b]=Nt[length(Nt)]/K#
#
return(results)#
}#
#
for(a in 1:length(r.vec))#
{#
	for(b in 1:length(K.vec))#
	{#
		for(c in 1:length(u.vec))#
		{#
			fun(r=r.vec[a],K=K.vec[b],u=u.vec[c],years=year.vec[1])#
		}#
	}#
}
results
a
b
c
a=1
b=1
c=1
fun=function(r,K,u,years)#
{#
	Ncur=0.2*K#
	Nt=vector(length=years)#
	Nt[1]=Ncur	#
#
	for(i in 2:years)#
	{#
		Nt[i]=Nt[i-1]+r*Nt[i-1]*(1-(Nt[i-1]/K)^2.39)-u*Nt[i-1]#
	}#
	results[c,a,b]=Nt[length(Nt)]/K#
}
results
results=array(0,dim=c(length(u.vec),length(r.vec),length(K.vec)))#
#
fun=function(r,K,u,years)#
{#
	Ncur=0.2*K#
	Nt=vector(length=years)#
	Nt[1]=Ncur	#
#
	for(i in 2:years)#
	{#
		Nt[i]=Nt[i-1]+r*Nt[i-1]*(1-(Nt[i-1]/K)^2.39)-u*Nt[i-1]#
	}#
	results[c,a,b]=Nt[length(Nt)]/K#
}
fun(r=r.vec[a],K=K.vec[b],u=u.vec[c],years=year.vec[1])
results
a
b
c
Nt[length(Nt)]
Nt
fun=function(r,K,u,years)#
{#
	Ncur=0.2*K#
	Nt=vector(length=years)#
	Nt[1]=Ncur	#
#
	for(i in 2:years)#
	{#
		Nt[i]=Nt[i-1]+r*Nt[i-1]*(1-(Nt[i-1]/K)^2.39)-u*Nt[i-1]#
	}#
}
fun=function(r,K,u,years)#
{#
	Ncur=0.2*K#
	Nt=vector(length=years)#
	Nt[1]=Ncur	#
#
	for(i in 2:years)#
	{#
		Nt[i]=Nt[i-1]+r*Nt[i-1]*(1-(Nt[i-1]/K)^2.39)-u*Nt[i-1]#
	}#
	return(Nt[length(Nt)]/K)#
}
rm(list=ls())#
#
r.vec=c(0.1,0.2,0.3)#
K.vec=c(1000,2000,3000)#
u.vec=c(0,0.05,0.1,0.15)#
year.vec=c(21,101)#
#
results=array(0,dim=c(length(u.vec),length(r.vec),length(K.vec)))#
#
fun=function(r,K,u,years)#
{#
	Ncur=0.2*K#
	Nt=vector(length=years)#
	Nt[1]=Ncur	#
#
	for(i in 2:years)#
	{#
		Nt[i]=Nt[i-1]+r*Nt[i-1]*(1-(Nt[i-1]/K)^2.39)-u*Nt[i-1]#
	}#
	return(Nt[length(Nt)]/K)#
}#
#
for(a in 1:length(r.vec))#
{#
	for(b in 1:length(K.vec))#
	{#
		for(c in 1:length(u.vec))#
		{#
			results[c,a,b]=fun(r=r.vec[a],K=K.vec[b],u=u.vec[c],years=year.vec[1])#
		}#
	}#
}
results
x=1000000
x
f=0.93
x*f^5
x*(f^5)
x*(f^10)
x*(f^50)
x*(f^100)
x*(f^200)
x=runif(10,0,6)
x
sum(x)
dnorm(x)
dnorm(x)/sum(dnorm(x))
sum(dnorm(x))
x=c(3.6,0.75,0.16,4.53,0.12)
dnorm(x)
sum(x)
sum(dnorm(x))
dnorm(x,3,1)
set.seed(1234)
x=runif(10,0,6)
x
sum(dnorm(x,3,1))
sum(dnorm(x))
dnorm(x)
sum(dnorm(x))
dnorm(x,3,1)
x <- runif(100000,0,1)#
y <- x^14#
hist(y)#
mean(y)
Lengths <- c(10,20,30,40,50,60,70,80,90,100)#
 Obs <- c(0,0,0,5,14,18,20,19,20,20)#
#
 Nout <- 10000  # set to 1000 for class
lengths
Lengths
Obs
Lp <- runif(Nout,40,60)#
			Dp <- runif(Nout,0,20)#
			Prior <- Lp*Dp
Lp
Dp
Lp <- runif(1,40,60)#
		Dp <- runif(1,0,20)#
		like <- exp(Likelihood(Lengths,Obs,NN=20,Len50=Lp,Delta=Dp))#
		Cumu <- Cumu + like
Lengths <- c(10,20,30,40,50,60,70,80,90,100)#
 Obs <- c(0,0,0,5,14,18,20,19,20,20)#
#
 Nout <- 10000  # set to 1000 for class#
 # This is, of course, the trick!#
 Threshold <- exp(-37.6)	#-37.6 is NLL corresponding to 2 parameters at MLE#
 Cumu <- 0#
 Ndone <- 0#
 ProbMore <- 0#
 Vals <- rep(0,length=Nout)
Lp <- runif(1,40,60)#
		Dp <- runif(1,0,20)#
		like <- exp(Likelihood(Lengths,Obs,NN=20,Len50=Lp,Delta=Dp))#
		Cumu <- Cumu + like
Likelihood <- function(Lengths,Obs,NN,Len50,Delta)#
{#
 Pred <- 1/(1+exp(-log(19)*(Lengths-Len50)/Delta))#
 Log_like <- Obs[1]*log(Pred[1])+(NN-Obs[1])*log(1-Pred[1])#
 Log_like <- Obs*log(Pred)+(NN-Obs)*log(1-Pred)#
 LogL <- sum(Log_like)#
 if (is.na(LogL)) LogL <- -1000#
 return(LogL)#
#
}
Lp <- runif(1,40,60)#
		Dp <- runif(1,0,20)#
		like <- exp(Likelihood(Lengths,Obs,NN=20,Len50=Lp,Delta=Dp))#
		Cumu <- Cumu + like
Lp
like
Cumu
like <- exp(Likelihood(Lengths=Lengths,Obs=Obs,NN=20,Len50=Lp,Delta=Dp))#
		Cumu <- Cumu + like
like
Lp
Dp
like <- Likelihood(Lengths=Lengths,Obs=Obs,NN=20,Len50=Lp,Delta=Dp)
like
like <- exp(Likelihood(Lengths=Lengths,Obs=Obs,NN=20,Len50=Lp,Delta=Dp))
like
x=NULL
Nout <- 1  # set to 1000 for class#
 # This is, of course, the trick!#
 Threshold <- exp(-37.6)	#-37.6 is NLL corresponding to 2 parameters at MLE#
 Cumu <- 0#
 Ndone <- 0#
 ProbMore <- 0#
 Vals <- rep(0,length=Nout)#
 L50s <- NULL#
 Deltas <- NULL#
 while (Ndone < Nout)#
  {#
		Lp <- runif(1,40,60)#
		Dp <- runif(1,0,20)#
		like <- exp(Likelihood(Lengths=Lengths,Obs=Obs,NN=20,Len50=Lp,Delta=Dp))#
		Cumu <- Cumu + like#
   while (Cumu > Threshold)#
    {#
			L50s <- c(L50s,Lp)#
			Deltas <- c(Deltas,Dp)#
			Ndone <- Ndone + 1#
			ProbMore <- ifelse((log((1/0.8)-1)/-log(19))*Dp+Lp>=55,ProbMore+1,ProbMore)#
    }#
  }#
 print(ProbMore)#
 hist(Vals) #
}
Threshold <- exp(-37.6)	#-37.6 is NLL corresponding to 2 parameters at MLE#
 Cumu <- 0#
 Ndone <- 0#
 ProbMore <- 0#
 Vals <- rep(0,length=Nout)#
 L50s <- NULL#
 Deltas <- NULL#
 while (Ndone < Nout)#
  {#
		Lp <- runif(1,40,60)#
		Dp <- runif(1,0,20)#
		like <- exp(Likelihood(Lengths=Lengths,Obs=Obs,NN=20,Len50=Lp,Delta=Dp))#
		Cumu <- Cumu + like#
   while (Cumu > Threshold)#
    {#
			L50s <- c(L50s,Lp)#
			Deltas <- c(Deltas,Dp)#
			Ndone <- Ndone + 1#
			ProbMore <- ifelse((log((1/0.8)-1)/-log(19))*Dp+Lp>=55,ProbMore+1,ProbMore)/Ndone#
    }#
  }#
 print(ProbMore)#
 hist(Vals) #
}
official.list=read.csv("ALLV16_9.12_OFFICIAL MR.csv",header=TRUE,sep=",")#
  #check dataset#
    length(as.character(official.list$Transmitter))           #391#
    length(as.character(unique(official.list$Transmitter)))   #391#
    xtrans=as.character(official.list$Transmitter)            #105th transmitter in list is unusuable (4617?)#
    xtrans=xtrans[c(1:104,106:length(xtrans))]#
#
# *********** modeploy and deploy.sum are lists of NOAA tags NOT UPDATED ************ ##
  ##### modeploy includes months tags were deployed, from database#
  ##### "Tags2010_2011.csv" is original tag list sent from NOAA Panama City (Drew Rosati) without monthly tagging information#
          ### check to see if "tagdeployment MR" and "Tags2010_2011" are same tags and same tagging locations#
          ### check "tagdeployment MR" and clean up -- AnimalID and Transmitters#
modeploy=read.csv("tagdeployment MR.csv",header=TRUE,sep=",")#
  #check dataset#
  length(as.character(modeploy$Transmitter))          #394#
  length(as.character(unique(modeploy$Transmitter)))  #393 ### one transmitter is repeated#
     raw.trans=as.character(modeploy$Transmitter)     ### in looking at data, the last 4 transmitters are unusuable#
     raw.id=as.character(modeploy$AnimalID)#
     repeat.trans=names(sort(-table(raw.trans)))[1]   #finds mode of raw.trans --- which transmitter is named twice (46166)#
     raw.id[which(raw.trans==repeat.trans)]           ## row with repeat transmitter has no animal ID, from same day#
     which(raw.trans==repeat.trans)                   ## remove row 280 from dataset#
#
modeploy=modeploy[c(1:which(raw.trans==repeat.trans)[1],(which(raw.trans==repeat.trans)[2]+1):length(raw.trans)),]#
  ed1.id=as.character(modeploy$AnimalID)              ## modeploy edit 1 : see if IDs are all unique#
  ed1.trans=as.character(modeploy$Transmitter)        ## vector of unique transmitters, edited#
  length(ed1.id)                                      ## 393 (same as unique transmitters)#
  length(unique(ed1.id))                              ## 391 *** 2 animal IDs are repeated with unique transmitters#
    repeat.id=names(sort(-table(ed1.id)))[1:2]        # mode of AnimalIDs --- ID 14950 and 14966 each have 2 transmitters assigned#
    modeploy[which(ed1.id %in% repeat.id),]           # checked excel document "Newtagdeployment.xlsx" -- note for fishID 14950 that acoustic tag from 2010 was not functioning in 2011#
                                                        # no note for retagged fish 14966, and new tag not present in summary of 2010-2011 deployed tags "Tags2010_2011.csv"#
                                                      ##### Keep multiple tag numbers for 1 animal in dataset to look out for both#
modeploy=modeploy[1:(length(modeploy[,1])-4),]        # Remove last 4 entries -- Transmitter numbers incomplete for lone fish#
#
### compare acoustic tags in summary tag list (deploy.sum) and database with monthly information (modeploy) ####
tag.sum=read.csv("Tags2010_2011.csv",header=TRUE,sep=",")#
  tag.sum[is.na(tag.sum)]=0#
#remove tags not yet deployed#
deploy.sum=rbind(subset(tag.sum,tag.sum$YEAR.TAGGED==2010),subset(tag.sum,tag.sum$YEAR.TAGGED==2011))#
#
length(deploy.sum$VEMCO.TAG)==length(unique(deploy.sum$VEMCO.TAG)) # summary is list of unique tags deployed#
length(deploy.sum$VEMCO.TAG)                                       # 390 tags in summary list#
modeploy.trans=as.numeric(as.character(modeploy$Transmitter))      # difficulties casting as numeric --- initial dataset casting data frame vs. matrix#
length(modeploy.trans)                                             # 389 tags in month deployment list#
modeploy.trans[which(modeploy.trans %in% deploy.sum$VEMCO.TAG == FALSE)]        # 1 transmitters in monthly data set not in summary list#
deploy.sum$VEMCO.TAG[which(deploy.sum$VEMCO.TAG %in% modeploy.trans == FALSE)]  # 2 transmitters in summary list but not in monthly data set#
#
### *********** compare official list to previous lists (modeploy and deploy.sum) ***************###
xtrans[which(xtrans %in% modeploy.trans == FALSE)]        # 2 transmitters in official dataset not in modeploy (46225 and 19299)#
xtrans[which(xtrans %in% deploy.sum$VEMCO.TAG == FALSE)]  # 1 transmitter in official dataset not in original tag summary (19299)#
#
modeploy.trans[which(modeploy.trans %in% xtrans == FALSE)]              # 1 transmitter in modeploy not in official dataset (62408)#
deploy.sum$VEMCO.TAG[which(deploy.sum$VEMCO.TAG %in% xtrans == FALSE)]  # 1 transmitter in original tag summary not in official dataset (45654) --- SHED
deploy10=subset(official.list,subset=official.list$Year==2010)#
deploy11=subset(official.list,subset=official.list$Year==2011)#
#
##### vectors of unique tag numbers entered in each year  #######
trans10=as.character(deploy10$Transmitter)#
trans11=as.character(deploy11$Transmitter)#
trans=c(trans10,trans11)#
#
deploydate10=paste("Yr1",deploy10$Month,sep="/")#
deploydate11=paste(ifelse(deploy11$Month %in% 1:2, "Yr1","Yr2"),deploy11$Month,sep="/")#
#### tags and locations only (geographic order) ####
tagloc10=data.frame(trans10,as.character(deploy10$River),deploydate10)#
  colnames(tagloc10)=c("Transmitter","River","Date")#
  tagloc10.code=vector(length=length(tagloc10$River))#
  for(i in 1:length(tagloc10$River))#
  {#
    tagloc10.code[i]=ifelse(tagloc10$River[i]=="PE","L",ifelse(tagloc10$River[i]=="PR","P",ifelse(tagloc10$River[i]=="ER","E",ifelse(tagloc10$River[i]=="BR","B",#
      ifelse(tagloc10$River[i]=="YR","Y",ifelse(tagloc10$River[i]=="CR","C",ifelse(tagloc10$River[i]=="AR","A",ifelse(tagloc10$River[i]=="OR","K",#
      ifelse(tagloc10$River[i]=="SR","S",0)))))))))#
  }#
#
tagloc11=data.frame(trans11,as.character(deploy11$River),deploydate11)#
  colnames(tagloc11)=c("Transmitter","River","Date")#
  tagloc11.code=vector(length=length(tagloc11$River))#
  for(i in 1:length(tagloc11$River))#
  {#
    tagloc11.code[i]=ifelse(tagloc11$River[i]=="PE","L",ifelse(tagloc11$River[i]=="PR","P",ifelse(tagloc11$River[i]=="ER","E",ifelse(tagloc11$River[i]=="BR","B",#
      ifelse(tagloc11$River[i]=="YR","Y",ifelse(tagloc11$River[i]=="CR","C",ifelse(tagloc11$River[i]=="AR","A",ifelse(tagloc11$River[i]=="OR","K",#
      ifelse(tagloc11$River[i]=="SR","S",0)))))))))#
  }#
#
PEtags=c(as.character(tagloc10$Transmitter[which(tagloc10$River=="PE")]),as.character(tagloc11$Transmitter[which(tagloc11$River=="PE")]))#
PRtags=c(as.character(tagloc10$Transmitter[which(tagloc10$River=="PR")]),as.character(tagloc11$Transmitter[which(tagloc11$River=="PR")]))#
ERtags=c(as.character(tagloc10$Transmitter[which(tagloc10$River=="ER")]),as.character(tagloc11$Transmitter[which(tagloc11$River=="ER")]))#
BRtags=c(as.character(tagloc10$Transmitter[which(tagloc10$River=="BR")]),as.character(tagloc11$Transmitter[which(tagloc11$River=="BR")]))#
YRtags=c(as.character(tagloc10$Transmitter[which(tagloc10$River=="YR")]),as.character(tagloc11$Transmitter[which(tagloc11$River=="YR")]))#
CRtags=c(as.character(tagloc10$Transmitter[which(tagloc10$River=="CR")]),as.character(tagloc11$Transmitter[which(tagloc11$River=="CR")]))#
ARtags=c(as.character(tagloc10$Transmitter[which(tagloc10$River=="AR")]),as.character(tagloc11$Transmitter[which(tagloc11$River=="AR")]))#
ORtags=c(as.character(tagloc10$Transmitter[which(tagloc10$River=="OR")]),as.character(tagloc11$Transmitter[which(tagloc11$River=="OR")]))#
SRtags=c(as.character(tagloc10$Transmitter[which(tagloc10$River=="SR")]),as.character(tagloc11$Transmitter[which(tagloc11$River=="SR")]))#
#
tagloc.code=c(tagloc10.code,tagloc11.code)#
deploydate=c(deploydate10,deploydate11)#
#
### ------------------------------------ UPLOAD RIVERMOUTH DETECTIONS ----------------------------------- ####
#
FWSdata=read.csv("NOAA_VR2W MR.csv",header=TRUE,sep=",")#
  YRdata2=read.csv("Yellow_rivermouth MR.csv",header=TRUE,sep=",")#
  YRdata3=read.csv("Yellow_rivermouth_2011 MR.csv",header=TRUE,sep=",")#
  FWSdata=rbind(FWSdata,YRdata2,YRdata3)#
#
  FWSrec=unique(FWSdata$Receiver)#
    #using code below, assigned transmitters to their respective rivers based on map & lat/lon locations#
  ERrec=111344#
  BRrec=114986#
  YRrec=c(106133,109204,106143,109205)#
  CRrec=c(111343,114974,114974)#
  ARrec=c(111422,111432,111433,109203)#
  ORrec=c(107749,109202,114399)#
#
#Y=106133 #Eglin#
#X=114989 #Perdido River#
#E=111344#
#B=114986#
#C=111343#
#X=114974 #Mitchell River#
#A=111422#
#X=111432 #Little St. Marks River#
#X=111433 #St. Marks River (Distributary in the AR system)#
#X=109203 #East River#
#X=109202 #Carabelle River#
#O=107749#
#X=114399 #Sopchoppy River#
#
PRdata=read.csv("Pascagoula_NOAA_Gates MR.csv",header=TRUE,sep=",")#
  PRrec=unique(PRdata$Receiver)#
#
SRdata1=read.csv("RKM6 MR.csv",header=TRUE,sep=",")#
SRdata2=read.csv("east pass MR.csv",header=TRUE,sep=",")#
SRdata3=read.csv("west pass MR.csv",header=TRUE,sep=",")#
SRdata=rbind(SRdata1,SRdata2,SRdata3)#
  SRrec=unique(SRdata$Receiver)#
#
PEdata=read.csv("NOAA_Pearl_June2011May2012 MR.csv",header=TRUE,sep=",")#
  PErec=unique(PEdata$Receiver)#
#
CRdata1=read.csv("VR2W_104393_1112 MR.csv",header=TRUE,sep=",")#
CRdata2=read.csv("VR2W_110645_1011 MR.csv",header=TRUE,sep=",")#
CRdata3=read.csv("VR2W_110645_1112 MR.csv",header=TRUE,sep=",")#
CRdata4=read.csv("VR2W_111387_1011 MR.csv",header=TRUE,sep=",")#
CRdata5=read.csv("VR2W_111387_1112 MR.csv",header=TRUE,sep=",")#
CRdata6=read.csv("CR111384 MR.csv",header=TRUE,sep=",")#
CRdata=rbind(CRdata1,CRdata2,CRdata3,CRdata4,CRdata5,CRdata6)#
  CRrec2=unique(CRdata$Receiver)#
#
#combine data from all rivers#
alldata=rbind(FWSdata,PRdata,SRdata,PEdata,CRdata)#
alldata=subset(alldata,alldata$Receiver!=114989) #remove Perdido -- not in major river drainages#
  allrec=unique(alldata$Receiver)#
  #use individual receiver datasets to assign alphabetic symbol river code to respective transmitters#
  riv.code=vector(length=length(allrec))#
  for(i in 1:length(allrec))#
  {#
    riv.code[i]=ifelse(allrec[i]%in%PErec,"L",ifelse(allrec[i]%in%PRrec,"P",ifelse(allrec[i]%in%ERrec,"E",ifelse(allrec[i]%in%BRrec,"B",#
      ifelse(allrec[i]%in%YRrec,"Y",ifelse(allrec[i]%in%CRrec,"C",ifelse(allrec[i]%in%ARrec,"A",ifelse(allrec[i]%in%ORrec,"K",#
      ifelse(allrec[i]%in%SRrec,"S",ifelse(allrec[i]%in%CRrec2,"C","X"))))))))))#
  }#
#
### total detections of each transmitter in each month#
detect=data.frame(alldata$Month,alldata$Day,alldata$Year,alldata$Transmitter,paste(alldata$Receiver,alldata$Transmitter,sep="."))#
  colnames(detect)=c("Month","Day","Year","Transmitter","Receiver.Transmitter")
identify transmitters with 3 or more detections per receiver -- monthly scale#
month=unique(detect$Month)#
year=unique(detect$Year)#
#
#set up vectors to output all possible transmitter numbers with >3 detections#
#transmitter number can occur >3 times in multiple months#
#transmitter only needs to show up at the same receiver >3 times in one month to count#
trans.det.vec=vector(length=length(unique(detect$Receiver.Transmitter)))#
month.det.vec=vector(length=length(unique(detect$Receiver.Transmitter)))#
year.det.vec=vector(length=length(unique(detect$Receiver.Transmitter)))#
  #River (receiver) corresponding to transmitter detections#
riv.det.vec=vector(length=length(unique(detect$Receiver.Transmitter)))#
#
for(i in 1:length(month))#
{#
  for(j in 1:length(year))#
  {#
        #subset date -- month and year#
          date.sub=subset(detect,subset=detect$Month==month[i]&detect$Year==year[j])#
        #if there are no detections for month/date combo, skip to next level i,j#
           if(length(date.sub[,1])==0)#
            {next}#
        #vector of receivers/transmitters in specified month/year#
          rectrans.vec=as.vector(date.sub$Receiver.Transmitter)#
        #unique receiver/transmitter combinations in specified month/year#
          rectrans=as.vector(unique(rectrans.vec))#
        #frequency count of receiver/transmitter combinations#
          #matches the unique rec/trans combinations in the total vector and counts frequency#
          counts=vector(length=length(rectrans))#
            for(z in match(rectrans.vec,rectrans))#
            {#
              counts[z]=counts[z]+1#
            }#
        #unique receiver/transmitter combinations and frequencies#
          output=data.frame(rectrans,counts)#
        #only use receiver/transmitter combinations that have 3 or more detections#
          output.sub=subset(output,subset=output[,2]>=3)#
        #receiver/transmitter combinations with 3 or more detections#
          rectrans.det=as.vector(output.sub[,1])#
        #transmitter numbers with 3 or more detections at 1 receiver#
          trans.det=as.numeric(substr(rectrans.det,8,15))#
        #river code for fish with 3 or more detections at 1 receiver#
          rec.det=as.numeric(substr(rectrans.det,1,6))#
          riv.det=vector(length=length(rec.det))#
          for(k in 1:length(riv.det))#
          {#
              r=match(rec.det[k],allrec)#
              riv.det[k]=riv.code[c(r)]#
          }#
#
          #will be used to produce matrix with months, year, and transmitter number#
            #of transmitters with >3 detections per month#
          #need to leave room so that more transmitter numbers can be added to the same#
            #vector each month#
            if(trans.det.vec[1]>0)#
            {trans.det.vec[(length(which(trans.det.vec>0))+1):(length(which(trans.det.vec>0))+length(trans.det))]=trans.det}#
            if(trans.det.vec[1]==FALSE)#
            {trans.det.vec[1:length(trans.det)]=trans.det}#
#
            if(month.det.vec[1]>0)#
            {month.det.vec[(length(which(month.det.vec>0))+1):(length(which(month.det.vec>0))+length(trans.det))]=month[i]}#
            if(month.det.vec[1]==FALSE)#
            {month.det.vec[1:length(trans.det)]=month[i]}#
#
            if(year.det.vec[1]>0)#
            {year.det.vec[(length(which(year.det.vec>0))+1):(length(which(year.det.vec>0))+length(trans.det))]=year[j]}#
            if(year.det.vec[1]==FALSE)#
            {year.det.vec[1:length(trans.det)]=year[j]}#
#
            if(riv.det.vec[1]>0)#
            {riv.det.vec[(length(which(riv.det.vec>0))+1):(length(which(riv.det.vec>0))+length(riv.det))]=riv.det}#
            if(riv.det.vec[1]==FALSE)#
            {riv.det.vec[1:length(riv.det)]=riv.det}#
#
    }#
  }#
#
  #remove 0s from the vectors -- I had left room for all possible Receiver/Transmitter combos to be counted, but some were detected less than 3 times per month#
 trans.det.vec=trans.det.vec[which(trans.det.vec>0)]#
 month.det.vec=month.det.vec[which(month.det.vec>0)]#
 year.det.vec=year.det.vec[which(year.det.vec>0)]#
 riv.det.vec=riv.det.vec[which(riv.det.vec!=FALSE)]#
#
#tags with 3 or more detections per month#
trans.det.mat=cbind(year.det.vec,month.det.vec,trans.det.vec,riv.det.vec)#
    colnames(trans.det.mat)=c("Year","Month","Transmitter","River")#
  # put detections in order by month and year#
  tdm=matrix(0,nrow=length(trans.det.mat[,1]),ncol=length(trans.det.mat[1,]))#
    colnames(tdm)=c("Year","Month","Transmitter","River")#
  for(j in 2010:2012)#
  {#
    for(i in 1:12)#
    {#
      sub=subset(trans.det.mat,subset=trans.det.mat[,2]==i&trans.det.mat[,1]==j)#
      #if there are no detections for month/date combo, skip to next level i,j#
           if(length(sub[,1])==0)#
            {next}#
#
      if(tdm[1,1]!=0)#
      {tdm[(length(which(tdm[,1]>0))+1):(length(which(tdm[,1]>0))+length(sub[,1])),]=sub}#
#
      if(tdm[1,1]==0)#
      {tdm[1:length(sub[,1]),]=sub}#
    }#
  }
unique transmitter numbers from time period to assess which are NOAA tags#
unique.trans.det=unique(trans.det.vec)#
#
###identify NOAA tags detected#
  #gives rows in transmitters detected that match NOAA transmitter numbers#
NOAAmatch=match(unique.trans.det,trans)#
  NOAAmatch[is.na(NOAAmatch)]=0#
  NOAAmatch=NOAAmatch[which(NOAAmatch>0)]#
#### transmitter numbers from NOAA list that were detected -- removes data we don't have access to #####
NOAAdet=trans[NOAAmatch]#
#
#create matrix with NOAA transmitters detected in each month#
NOAAdetmat=tdm[c(which(tdm[,3] %in% NOAAdet)),]#
  colnames(NOAAdetmat)=c("Year","Month","Transmitter","River")
head(tdm)
x1=tdm[,3]
x2=unique(x1)
x1
x2
length(x1)
length(x2)
xmat=matrix(0,ncol=4,nrow=length(x1))#
  colnames(xmat)=c("Year","Month","Transmitter","River")
xmat
for(j in 2010:2012)#
{#
  for(i in 1:12)#
  {#
    sub=subset(NOAAdetmat,NOAAdetmat[,1]==j&NOAAdetmat[,2]==i) #subset each month and year from detected NOAA tags#
      if(length(sub[,1])==0)   ### if month-year combination doesn't exist in dataset, skip to next combo#
        {next}#
    sub.trans=sub[,3] #vector of detected transmitters#
    if(length(which(table(sub.trans)>1))==0) ### if each transmitter is only detected once, skip to next month-year combo#
      {next}#
#
    # if some transmitters are detected more than once per month, which were at different river drainages?#
    for(k in 1:length(unique(sub.trans)))#
    {#
      if(length(which(sub.trans==sub.trans[k]))>1)#
      {sub2=subset(sub,sub[,3]==sub.trans[k])} else{next}#
        riv=sub2[,4][1]#
          if(length(which(sub2[,4]!=riv))==0) ### if all detections for each transmitter were in same river drainage, skip to next transmitter#
          {next}#
#
      if(xmat[1,1]!=0)#
      {xmat[(length(which(xmat[,1]>0))+1):(length(which(xmat[,1]>0))+length(sub2[,1])),]=sub2}#
#
      if(xmat[1,1]==0)#
      {xmat[1:length(sub2[,1]),]=sub2}#
    }#
  }#
}
xmat
xmat=xmat[which(xmat[,1]!=0),]#
xmat=unique(xmat)
xmat
length(unique(xmat[,3])) ### 10 fish violate assumption ####
length(unique(NOAAdetmat[,3]))
10/334
sub.trans
head(NOAAdetmat)
outm=c(9,10,11,12,1,2)#
inm=c(3,4,5,6,7,8)#
#
sub=subset(NOAAdetmat,NOAAdetmat[,2]%in%outm)
sub
which(subout[,2]%in%c(1,2))
subout=subset(NOAAdetmat,NOAAdetmat[,2]%in%outm)#
	which(subout[,2]%in%c(1,2))
subout[36,]
which(subout[,1]=="2010")
which(subout[,1]=="2011"&subout[,2]%in%c(1,2))
subout[which(subout[,2]%in%c(1,2))]
subout[which(subout[,2]%in%c(1,2)),]
subout1=subout[c(which(subout[,1]=="2010"),which(subout[,1]=="2011"&subout[,2]%in%c(1,2))),]
subout1
subout1=subout[c(which(subout[,1]=="2010"),which(subout[,1]=="2011"&subout[,2]%in%c(1,2))),]#
	subout2=subout[c(which(subout[,1]=="2011"),which(subout[,1]=="2012"&subout[,2]%in%c(1,2))),]#
	subout3=subout[c(which(subout[,1]=="2012"),which(subout[,1]=="2013"&subout[,2]%in%c(1,2))),]
subout1
subout2
subout3
subout=subset(NOAAdetmat,NOAAdetmat[,2]%in%outm)#
	which(subout[,2]%in%c(1,2))#
	subout1=subout[c(which(subout[,1]=="2010"&subout[,2]%in%c(9,10,11,12)),which(subout[,1]=="2011"&subout[,2]%in%c(1,2))),]#
	subout2=subout[c(which(subout[,1]=="2011"&subout[,2]%in%c(9,10,11,12)),which(subout[,1]=="2012"&subout[,2]%in%c(1,2))),]#
	subout3=subout[c(which(subout[,1]=="2012"&subout[,2]%in%c(9,10,11,12)),which(subout[,1]=="2013"&subout[,2]%in%c(1,2))),]
subout1
subout2
head(subout2)
subout3
tail(NOAAdetmat)
subin=subset(NOAAdetmat,NOAAdetmat[,2]%in%inm)#
	subin1=subin[which(subin[,1]=="2010"),]#
	subin2=subin[which(subin[,1]=="2011"),]#
	subin3=subin[which(subin[,1]=="2013"),]
subin1
subin2
subin3
head(subin)
subin=subset(NOAAdetmat,NOAAdetmat[,2]%in%inm)#
	subin1=subin[which(subin[,1]=="2010"),]#
	subin2=subin[which(subin[,1]=="2011"),]#
	subin3=subin[which(subin[,1]=="2012"),]
subin3
subin1
subin2
subin3
subin1=subin[which(subin[,1]=="2011"),]#
	subin2=subin[which(subin[,1]=="2012"),]
subin1
subin2
length(which(table(sub.trans)>1))==0)
length(which(table(sub.trans)>1))==0
length(which(table(subout.trans)>1))==0
subout.trans=subout[,3]#
	length(which(table(subout.trans)>1))==0
table(subout.trans)
subout1.trans=subout1[,3]#
	length(which(table(subout1.trans)>1))==0
length(which(table(subout1.trans)>1))
subout2.trans=subout2[,3]#
	length(which(table(subout2.trans)>1))
head(xmat)
head(xmat2)
xmat2=matrix(0,ncol=4,nrow=length(x1))#
	colnames(xmat2)=c("Year","Season","Transmitter","River")
xmat2
xmat2=matrix(NULL,ncol=4,nrow=length(x1))#
	colnames(xmat2)=c("Year","Season","Transmitter","River")
for(i in 1:length(unique(subout1.trans)))#
	{#
		if(length(which(subout1.trans==subout1.trans[i]))>1)#
		{subout1.2=subset(subout1,subout1[,3]==subout1.trans[i])}else{next}#
			riv=subout1.2[,4][1]#
				if(length(which(subout1.2[,4]!=riv))==0){next}#
				if(xmat2[1,1]!=0)#
				{xmat2[(length(which(xmat2[,1]>0))+1):(length(which(xmat2[,1]>0))+length(subout1.2[,1])),]=subout1.2}#
				if(xmat2[1,1]==0)#
				{xmat2[1:length(subout1.2[,1]),]=subout1.2}#
	}
xmat2
for(i in 1:length(unique(subout1.trans)))#
	{#
		if(length(which(subout1.trans==subout1.trans[i]))>1)#
		{subout1.2=subset(subout1,subout1[,3]==subout1.trans[i])}else{next}#
			riv=subout1.2[,4][1]#
				if(length(which(subout1.2[,4]!=riv))==0){print(0)}next#
				if(xmat2[1,1]!=0)#
				{xmat2[(length(which(xmat2[,1]>0))+1):(length(which(xmat2[,1]>0))+length(subout1.2[,1])),]=subout1.2}#
				if(xmat2[1,1]==0)#
				{xmat2[1:length(subout1.2[,1]),]=subout1.2}#
	}
for(i in 1:length(unique(subout1.trans)))#
	{#
		if(length(which(subout1.trans==subout1.trans[i]))>1)#
		{subout1.2=subset(subout1,subout1[,3]==subout1.trans[i])}else{next}#
			riv=subout1.2[,4][1]#
				if(length(which(subout1.2[,4]!=riv))==0){print(0),next}#
				if(xmat2[1,1]!=0)#
				{xmat2[(length(which(xmat2[,1]>0))+1):(length(which(xmat2[,1]>0))+length(subout1.2[,1])),]=subout1.2}#
				if(xmat2[1,1]==0)#
				{xmat2[1:length(subout1.2[,1]),]=subout1.2}#
	}
for(i in 1:length(unique(subout1.trans)))#
	{#
		if(length(which(subout1.trans==subout1.trans[i]))>1)#
		{subout1.2=subset(subout1,subout1[,3]==subout1.trans[i])}else{next}#
			riv=subout1.2[,4][1]#
				if(length(which(subout1.2[,4]!=riv))==0)#
				{#
					print(0)#
					next#
				}#
				if(xmat2[1,1]!=0)#
				{xmat2[(length(which(xmat2[,1]>0))+1):(length(which(xmat2[,1]>0))+length(subout1.2[,1])),]=subout1.2}#
				if(xmat2[1,1]==0)#
				{xmat2[1:length(subout1.2[,1]),]=subout1.2}#
	}
length(subout1.2)
length(unique(subout1.trans))
i=1
length(which(subout1.trans==subout1.trans[i]))>1
subout1.trans
subout1.trans[i]
which(subout1.trans==subout1.trans[i])
subout=subset(NOAAdetmat,NOAAdetmat[,2]%in%outm)#
	which(subout[,2]%in%c(1,2))#
	subout1=subout[c(which(subout[,1]=="2010"&subout[,2]%in%c(9,10,11,12)),which(subout[,1]=="2011"&subout[,2]%in%c(1,2))),]#
	subout2=subout[c(which(subout[,1]=="2011"&subout[,2]%in%c(9,10,11,12)),which(subout[,1]=="2012"&subout[,2]%in%c(1,2))),]#
subout1.trans=subout1[,3]#
	length(which(table(subout1.trans)>1))#
subout2.trans=subout2[,3]#
	length(which(table(subout2.trans)>1))#
	for(i in 1:length(unique(subout1.trans)))#
	{#
		if(length(which(subout1.trans==subout1.trans[i]))>1)#
		{subout1.2=subset(subout1,subout1[,3]==subout1.trans[i])}#
		else#
		{#
			print("no rep trans")#
			next#
		}#
			riv=subout1.2[,4][1]#
				if(length(which(subout1.2[,4]!=riv))==0)#
				{#
					print("no rep riv")#
					next#
				}#
				if(xmat2[1,1]!=0)#
				{xmat2[(length(which(xmat2[,1]>0))+1):(length(which(xmat2[,1]>0))+length(subout1.2[,1])),]=subout1.2}#
				if(xmat2[1,1]==0)#
				{xmat2[1:length(subout1.2[,1]),]=subout1.2}#
	}
for(i in 1:length(unique(subout1.trans)))#
	{#
		if(length(which(subout1.trans==subout1.trans[i]))>1)#
		{subout1.2=subset(subout1,subout1[,3]==subout1.trans[i])}#
		else#
		{#
			print(paste("no rep trans",i))#
			next#
		}#
			riv=subout1.2[,4][1]#
				if(length(which(subout1.2[,4]!=riv))==0)#
				{#
					print(paste("no rep riv",i))#
					next#
				}#
				if(xmat2[1,1]!=0)#
				{xmat2[(length(which(xmat2[,1]>0))+1):(length(which(xmat2[,1]>0))+length(subout1.2[,1])),]=subout1.2}#
				if(xmat2[1,1]==0)#
				{xmat2[1:length(subout1.2[,1]),]=subout1.2}#
	}
for(i in 1:length(unique(subout2.trans)))#
	{#
		if(length(which(subout2.trans==subout2.trans[i]))>1)#
		{subout2.2=subset(subout2,subout2[,3]==subout2.trans[i])}#
		else#
		{#
			print(paste("no rep trans",i))#
			next#
		}#
			riv=subout2.2[,4][1]#
				if(length(which(subout2.2[,4]!=riv))==0)#
				{#
					print(paste("no rep riv",i))#
					next#
				}#
				if(xmat2[1,1]!=0)#
				{xmat2[(length(which(xmat2[,1]>0))+1):(length(which(xmat2[,1]>0))+length(subout2.2[,1])),]=subout2.2}#
				if(xmat2[1,1]==0)#
				{xmat2[1:length(subout2.2[,1]),]=subout2.2}#
	}
length(unique(subout2.trans))
head(xmat2)
xmat2
xmat3=matrix(0,ncol=4,nrow=length(x1))#
	colnames(xmat3)=c("Year","Season","Transmitter","River")
head(subin1)
subin=subset(NOAAdetmat,NOAAdetmat[,2]%in%inm)#
	subin1=subin[which(subin[,1]=="2011"),]#
	subin2=subin[which(subin[,1]=="2012"),]#
#
subin1.trans=subin1[,3]#
	length(which(table(subin1.trans)>1))#
subin2.trans=subin2[,3]#
	length(which(table(subin2.trans)>1))#
	for(i in 1:length(unique(subin1.trans)))#
	{#
		if(length(which(subin1.trans==subin1.trans[i]))>1)#
		{subin1.2=subset(subin1,subin1[,3]==subin1.trans[i])}#
		else#
		{#
			print(paste("no rep trans",i))#
			next#
		}#
			riv=subin1.2[,4][1]#
				if(length(which(subin1.2[,4]!=riv))==0)#
				{#
					print(paste("no rep riv",i))#
					next#
				}#
				if(xmat3[1,1]!=0)#
				{xmat3[(length(which(xmat3[,1]>0))+1):(length(which(xmat3[,1]>0))+length(subin1.2[,1])),]=subin1.2}#
				if(xmat3[1,1]==0)#
				{xmat3[1:length(subin1.2[,1]),]=subin1.2}#
	}#
	for(i in 1:length(unique(subin2.trans)))#
	{#
		if(length(which(subin2.trans==subin2.trans[i]))>1)#
		{subin2.2=subset(subin2,subin2[,3]==subin2.trans[i])}#
		else#
		{#
			print(paste("no rep trans",i))#
			next#
		}#
			riv=subin2.2[,4][1]#
				if(length(which(subin2.2[,4]!=riv))==0)#
				{#
					print(paste("no rep riv",i))#
					next#
				}#
				if(xmat3[1,1]!=0)#
				{xmat3[(length(which(xmat3[,1]>0))+1):(length(which(xmat3[,1]>0))+length(subin2.2[,1])),]=subin2.2}#
				if(xmat3[1,1]==0)#
				{xmat3[1:length(subin2.2[,1]),]=subin2.2}#
	}
head(xmat3)
xmat3
xmat2=xmat2[which(xmat2[,1]!=0),]#
	xmat2=unique(xmat2)#
	xmat3=xmat3[which(xmat3[,1]!=0),]#
	xmat3=unique(xmat3)
xmat2
xmat3
length(unique(xmat2[,3]))
length(unique(xmat3[,3]))
4/334
18/334
length(unique(c(xmat2[,3],xmat3[,3])))
18+4
22/334
6/100
3/50
10/334
4/334
xmat3
18/22
for(i in 1:length(unique(xmat3[,3])))#
{#
	sub.xmat3=xmat3[which(xmat3[,3]==xmat3[,3][i]),]#
	print(sub.xmat3[,4])#
}
for(i in 1:length(unique(xmat2[,3])))#
{#
	sub.xmat2=xmat2[which(xmat2[,3]==xmat2[,3][i]),]#
	print(sub.xmat2[,4])#
}
xmat3
length(unique(xmat3))
length(unique(xmat3[,3]))
length(unique(xmat2[,3]))
which(xmat3[,3]==xmat3[,3][1])
sub.xmat3=xmat3[which(xmat3[,3]==xmat3[,3][i])]
sub.xmat3
i
head(xmat3)
tail(xmat3)
unique(xmat3[,3])
i=length(unique(xmat3[,3]))
i
sub.xmat3=xmat3[which(xmat3[,3]==xmat3[,3][i]),]
sub.xmat3
xmat3[,3][18]
for(i in 1:length(unique(xmat3[,3])))#
{#
	sub.xmat3=xmat3[which(xmat3[,3]==unique(xmat3[,3])[i]),]#
	print(sub.xmat3[,4])#
}
for(i in 1:length(unique(xmat2[,3])))#
{#
	sub.xmat2=xmat2[which(xmat2[,3]==unique(xmat2[,3])[i]),]#
	print(sub.xmat2[,4])#
}
xmat2
i=1
for(i in 1:length(unique(subin2.trans)))#
	{#
		if(length(which(subin2.trans==subin2.trans[i]))>1)#
		{subin2.2=subset(subin2,subin2[,3]==subin2.trans[i])}#
		else#
		{#
			print(paste("no rep trans",i))#
			next#
		}#
			riv=subin2.2[,4][1]#
				if(length(which(subin2.2[,4]!=riv))==0)#
				{#
					print(paste("no rep riv",i))#
					next#
				}#
				if(xmat3[1,1]!=0)#
				{xmat3[(length(which(xmat3[,1]>0))+1):(length(which(xmat3[,1]>0))+length(subin2.2[,1])),]=subin2.2}#
				if(xmat3[1,1]==0)#
				{xmat3[1:length(subin2.2[,1]),]=subin2.2}#
	}
xmat3=matrix(0,ncol=4,nrow=length(x1))#
	colnames(xmat3)=c("Year","Season","Transmitter","River")
for(i in 1:length(unique(subin1.trans)))#
	{#
		if(length(which(subin1.trans==subin1.trans[i]))>1)#
		{subin1.2=subset(subin1,subin1[,3]==subin1.trans[i])}#
		else#
		{#
			print(paste("no rep trans",i))#
			next#
		}#
			riv=subin1.2[,4][1]#
				if(length(which(subin1.2[,4]!=riv))==0)#
				{#
					print(paste("no rep riv",i))#
					next#
				}#
				if(xmat3[1,1]!=0)#
				{xmat3[(length(which(xmat3[,1]>0))+1):(length(which(xmat3[,1]>0))+length(subin1.2[,1])),]=subin1.2}#
				if(xmat3[1,1]==0)#
				{xmat3[1:length(subin1.2[,1]),]=subin1.2}#
	}#
	for(i in 1:length(unique(subin2.trans)))#
	{#
		if(length(which(subin2.trans==subin2.trans[i]))>1)#
		{subin2.2=subset(subin2,subin2[,3]==subin2.trans[i])}#
		else#
		{#
			print(paste("no rep trans",i))#
			next#
		}#
			riv=subin2.2[,4][1]#
				if(length(which(subin2.2[,4]!=riv))==0)#
				{#
					print(paste("no rep riv",i))#
					next#
				}#
				if(xmat3[1,1]!=0)#
				{xmat3[(length(which(xmat3[,1]>0))+1):(length(which(xmat3[,1]>0))+length(subin2.2[,1])),]=subin2.2}#
				if(xmat3[1,1]==0)#
				{xmat3[1:length(subin2.2[,1]),]=subin2.2}#
	}
xmat3=xmat3[which(xmat3[,1]!=0),]#
	xmat3=unique(xmat3)
xmat2=matrix(0,ncol=4,nrow=length(x1))#
	colnames(xmat2)=c("Year","Season","Transmitter","River")#
xmat3=matrix(0,ncol=4,nrow=length(x1))#
	colnames(xmat3)=c("Year","Season","Transmitter","River")#
outm=c(9,10,11,12,1,2)#
inm=c(3,4,5,6,7,8)#
#
subout=subset(NOAAdetmat,NOAAdetmat[,2]%in%outm)#
	which(subout[,2]%in%c(1,2))#
	subout1=subout[c(which(subout[,1]=="2010"&subout[,2]%in%c(9,10,11,12)),which(subout[,1]=="2011"&subout[,2]%in%c(1,2))),]#
	subout2=subout[c(which(subout[,1]=="2011"&subout[,2]%in%c(9,10,11,12)),which(subout[,1]=="2012"&subout[,2]%in%c(1,2))),]#
subout1.trans=subout1[,3]#
	length(which(table(subout1.trans)>1))#
subout2.trans=subout2[,3]#
	length(which(table(subout2.trans)>1))#
	for(i in 1:length(unique(subout1.trans)))#
	{#
		if(length(which(subout1.trans==subout1.trans[i]))>1)#
		{subout1.2=subset(subout1,subout1[,3]==subout1.trans[i])}#
		else#
		{#
			print(paste("no rep trans",i))#
			next#
		}#
			riv=subout1.2[,4][1]#
				if(length(which(subout1.2[,4]!=riv))==0)#
				{#
					print(paste("no rep riv",i))#
					next#
				}#
				if(xmat2[1,1]!=0)#
				{xmat2[(length(which(xmat2[,1]>0))+1):(length(which(xmat2[,1]>0))+length(subout1.2[,1])),]=subout1.2}#
				if(xmat2[1,1]==0)#
				{xmat2[1:length(subout1.2[,1]),]=subout1.2}#
	}#
	for(i in 1:length(unique(subout2.trans)))#
	{#
		if(length(which(subout2.trans==subout2.trans[i]))>1)#
		{subout2.2=subset(subout2,subout2[,3]==subout2.trans[i])}#
		else#
		{#
			print(paste("no rep trans",i))#
			next#
		}#
			riv=subout2.2[,4][1]#
				if(length(which(subout2.2[,4]!=riv))==0)#
				{#
					print(paste("no rep riv",i))#
					next#
				}#
				if(xmat2[1,1]!=0)#
				{xmat2[(length(which(xmat2[,1]>0))+1):(length(which(xmat2[,1]>0))+length(subout2.2[,1])),]=subout2.2}#
				if(xmat2[1,1]==0)#
				{xmat2[1:length(subout2.2[,1]),]=subout2.2}#
	}#
#
subin=subset(NOAAdetmat,NOAAdetmat[,2]%in%inm)#
	subin1=subin[which(subin[,1]=="2011"),]#
	subin2=subin[which(subin[,1]=="2012"),]#
#
subin1.trans=subin1[,3]#
	length(which(table(subin1.trans)>1))#
subin2.trans=subin2[,3]#
	length(which(table(subin2.trans)>1))#
	for(i in 1:length(unique(subin1.trans)))#
	{#
		if(length(which(subin1.trans==subin1.trans[i]))>1)#
		{subin1.2=subset(subin1,subin1[,3]==subin1.trans[i])}#
		else#
		{#
			print(paste("no rep trans",i))#
			next#
		}#
			riv=subin1.2[,4][1]#
				if(length(which(subin1.2[,4]!=riv))==0)#
				{#
					print(paste("no rep riv",i))#
					next#
				}#
				if(xmat3[1,1]!=0)#
				{xmat3[(length(which(xmat3[,1]>0))+1):(length(which(xmat3[,1]>0))+length(subin1.2[,1])),]=subin1.2}#
				if(xmat3[1,1]==0)#
				{xmat3[1:length(subin1.2[,1]),]=subin1.2}#
	}#
	for(i in 1:length(unique(subin2.trans)))#
	{#
		if(length(which(subin2.trans==subin2.trans[i]))>1)#
		{subin2.2=subset(subin2,subin2[,3]==subin2.trans[i])}#
		else#
		{#
			print(paste("no rep trans",i))#
			next#
		}#
			riv=subin2.2[,4][1]#
				if(length(which(subin2.2[,4]!=riv))==0)#
				{#
					print(paste("no rep riv",i))#
					next#
				}#
				if(xmat3[1,1]!=0)#
				{xmat3[(length(which(xmat3[,1]>0))+1):(length(which(xmat3[,1]>0))+length(subin2.2[,1])),]=subin2.2}#
				if(xmat3[1,1]==0)#
				{xmat3[1:length(subin2.2[,1]),]=subin2.2}#
	}#
#
	xmat2=xmat2[which(xmat2[,1]!=0),]#
	xmat2=unique(xmat2)#
	xmat3=xmat3[which(xmat3[,1]!=0),]#
	xmat3=unique(xmat3)#
	length(unique(xmat2[,3])) ### 4 fish violate assumption during out-migration####
	length(unique(xmat3[,3])) ### 18 fish violate assumption during in-migration####
	length(unique(c(xmat2[,3],xmat3[,3])))	###22 total (no repeats)#
	length(unique(NOAAdetmat[,3]))	### 334 fish detected total
for(i in 1:length(unique(xmat3[,3])))#
{#
	sub.xmat3=xmat3[which(xmat3[,3]==unique(xmat3[,3])[i]),]#
	print(sub.xmat3[,4])#
}
for(i in 1:length(unique(xmat2[,3])))#
{#
	sub.xmat2=xmat2[which(xmat2[,3]==unique(xmat2[,3])[i]),]#
	print(sub.xmat2[,4])#
}
21/334
18/21
7/18
9/17
9/18
1/18
50+39
